#!/usr/bin/env python3

"""Solves given jigsaw puzzle

This module loads puzzle and initializes genetic algorithm with
given number of generations and population. At the end, solution image is displayed.

"""
import sys
import os
GAPS_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(GAPS_DIR)
import argparse
# import matplotlib.pyplot as plt
import cv2
from time import time
from gaps.size_detector import SizeDetector
# from gaps.plot import Plot
from gaps.config import Config
from gaps.crowd.dbaccess import mongo_wrapper

GENERATIONS = 20
POPULATION = 200

'''
def show_image(img, title):
    if not args.verbose:
        Plot(img, title)
    plt.show()
'''


def parse_arguments():
    """Parses input arguments required to solve puzzle"""
    parser = argparse.ArgumentParser(description="A Genetic based solver for jigsaw puzzles")
    parser.add_argument("--image", type=str, default="out.jpg", help="Input image.")
    parser.add_argument("--generations", type=int, default=GENERATIONS, help="Num of generations.")
    parser.add_argument("--population", type=int, default=POPULATION, help="Size of population.")
    parser.add_argument("--size", type=int, help="Single piece size in pixels.")
    parser.add_argument("--verbose", action="store_true", help="Show best individual after each generation.")
    parser.add_argument("--fitness", type=str, choices=['rank-based', 'sigmoid', 'exponent'], required=True)
    parser.add_argument("--rows", type=int, default=-1)
    parser.add_argument("--cols", type=int, default=-1)
    parser.add_argument("--roundid", type=int, required=True)
    parser.add_argument("--save", action="store_true", help="Save puzzle result as image.")
    parser.add_argument("--algorithm", type=str, choices=['edge', 'crowd'], default='crowd')
    parser.add_argument("--offline", action="store_true")
    return parser.parse_args()

def set_round_info(args):
    round_info = mongo_wrapper.db['rounds'].find_one({'round_id': args.roundid})
    
    base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
    image_path = os.path.join(base_dir, 'CrowdJigsaw/public/'+round_info['image'])
    args.image = image_path

    args.size = round_info['tileWidth']
    args.cols = round_info['tilesPerRow']
    args.rows = round_info['tilesPerColumn']
    args.population = Config.population
    args.generations = Config.generations


if __name__ == "__main__":
    args = parse_arguments()
    Config.round_id = args.roundid
    Config.cli_args = args
    if args.offline:
        set_round_info(args)
    image = cv2.imread(args.image)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    assert args.size is not None
    piece_size = args.size
    '''
    if args.size is not None:
        piece_size = args.size
    else:
        detector = SizeDetector(image)
        piece_size = detector.detect_piece_size()
    '''

    '''
    print("\n=== Population:  {}".format(args.population))
    print("=== Generations: {}".format(args.generations))
    print("=== Piece size:  {} px".format(piece_size))
    '''

    # Let the games begin! And may the odds be in your favor!
    start = time()
    if args.algorithm == 'crowd':
        print("Start using crowd-based fitness measure...")
        from gaps.crowd.genetic_algorithm import GeneticAlgorithm
        algorithm = GeneticAlgorithm(image, piece_size, args.population, args.generations, args.rows, args.cols)
    elif args.algorithm == 'edge':
        print("Start using edge dissimilarity measure...")
        from gaps.edge.genetic_algorithm import GeneticAlgorithm
        algorithm = GeneticAlgorithm(image, piece_size, args.population, args.generations)
    else:
        print('unknown algorithm: {}'.format(algorithm))
        exit()
    solution = algorithm.start_evolution(args.verbose)
    end = time()

    print("\n=== Done in {0:.3f} s".format(end - start))

    solution_image = solution.to_image()
    solution_image_name = args.image.split(".")[0] + "_solution.jpg"

    if args.save:
        cv2.imwrite(solution_image_name, solution_image)
        print("=== Result saved as '{}'".format(solution_image_name))
    
    '''
    print("=== Close figure to exit")
    if args.verbose:
        show_image(solution_image, "Solution")
    '''
